<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Macros</name>
    </assembly>
    <members>
        <member name="T:GenerationAttributes.SimpleMethodMacro">
            <summary>
              Replaces call to a method annotated with this attribute with the specified string.
            </summary>
            Example usage (declaration):
            <code><![CDATA[
            public static class Util {
              [SimpleMethodMacro(@"$""${obj}={${obj}}"""")]
              public static string echo<A>(this A obj) => throw new MacroException();
            }
            ]]></code>
            Example usage (invocation):
            <code><![CDATA[
            var answer = 42;
            // prints "Our state: answer=42"
            Console.WriteLine($"Our state: {answer.echo()}");
            ]]></code>
            Parameters:
            <ul>
              <li>${this} - pointer to self. Not replaced in static methods.</li>
              <li>${uniqueId} - unique id for this macro call, can be used as a temporary variable name.</li>
              <li>${argumentName} - refers to argument named 'argumentName'</li>
              <li>${returnType} - resolved return type of the invoked method.</li>
              <li>${genericX} - resolved generic type of a generic argument named `X`.</li>
            </ul>
        </member>
        <member name="T:GenerationAttributes.SimpleMethodMacroScriban">
            <summary>
            Similar to <see cref="T:GenerationAttributes.SimpleMethodMacro"/>, but uses
            <a href="https://github.com/scriban/scriban/tree/master/doc">Scriban</a> for template evaluation.
            <para/>
            Additional functions:
            <ul>
              <li>inline(string functionName, string[] args...) - inlines a lambda function from the argument named `functionName`.</li>
            </ul>
            </summary>
        </member>
        <member name="T:GenerationAttributes.StatementMethodMacro">
            <summary>
              Replaces call to a method annotated with this attribute with the specified string.
            </summary>
            Example usage (declaration):
            <code><![CDATA[
            public class Log {
              [StatementMethodMacro(@"if (${this}.isDebug()) ${this}.debugReal(${msg} /* or ${arg0} */);")]
              public B debug(string msg) => throw new MacroException();
            }
            ]]></code>
            Example usage (invocation):
            <code><![CDATA[
            log.debug("I will only be logged in debug level!");
            ]]></code>
            Parameters:
            <ul>
              <li>${this} - pointer to self. Not replaced in static methods.</li>
              <li>${uniqueId} - unique id for this macro call, can be used as a temporary variable name.</li>
              <li>${argumentName} - refers to argument named 'argumentName'</li>
              <li>${returnType} - resolved return type of the invoked method.</li>
              <li>${genericX} - resolved generic type of a generic argument named `X`.</li>
            </ul>
        </member>
        <member name="T:GenerationAttributes.StatementMethodMacroScriban">
            <summary>
            Similar to <see cref="T:GenerationAttributes.StatementMethodMacro"/>, but uses
            <a href="https://github.com/scriban/scriban/tree/master/doc">Scriban</a> for template evaluation.
            <para/>
            Additional functions:
            <ul>
              <li>inline(string functionName, string[] args...) - inlines a lambda function from the argument named `functionName`.</li>
            </ul>
            </summary>
        </member>
        <member name="T:GenerationAttributes.VarMethodMacro">
             <summary>
               Replaces local variable assignment from calling a method annotated with this attribute with the specified string.
             </summary>
             Example usage (declaration):
             <code><![CDATA[
             public class Either<A, B> {
               [VarMethodMacro(
             @"var ${varName}__either = ${this};
             if (!${varName}__either.rightValueOut(out ${varType} ${varName})) return ${varName}__either.__unsafeGetLeft;
             ")]
               public B rightOr_RETURN() => throw new MacroException();
             }
            
             publc static class EitherExts {
               [VarMethodMacro(
             @"var ${varName}__either = ${either}; // or ${arg0}
             if (!${varName}__either.rightValueOut(out ${varType} ${varName})) return ${varName}__either.__unsafeGetLeft;
             ")]
               public B rightOr_RETURN2<A, B>(this Either<A, B> either) => throw new MacroException();
             }
             ]]></code>
             Example usage (invocation):
             <code><![CDATA[
             var x = some.operation().rightOr_RETURN();
             ]]></code>
             Parameters:
             <ul>
               <li>${varType} - type of x</li>
               <li>${varName} - name of x</li>
               <li>${this} - pointer to self. Not replaced in static methods.</li>
               <li>${uniqueId} - unique id for this macro call, can be used as a temporary variable name.</li>
               <li>${argumentName} - refers to argument named 'argumentName'</li>
               <li>${returnType} - resolved return type of the invoked method.</li>
               <li>${genericX} - resolved generic type of a generic argument named `X`.</li>
             </ul>
        </member>
        <member name="T:GenerationAttributes.VarMethodMacroScriban">
            <summary>
            Similar to <see cref="T:GenerationAttributes.VarMethodMacro"/>, but uses
            <a href="https://github.com/scriban/scriban/tree/master/doc">Scriban</a> for template evaluation.
            <para/>
            Additional functions:
            <ul>
              <li>inline(string functionName, string[] args...) - inlines a lambda function from the argument named `functionName`.</li>
            </ul>
            </summary>
        </member>
        <member name="T:GenerationAttributes.CompilationErrorMethodMacroAttribute">
             <summary>
             Fails the compilation with the specified message.
             <para/>
             This might seem useless, but it is very useful in "banning" methods if you do not have
             <see cref="T:System.ObsoleteAttribute"/> banned.
             <para/>
             For example:
             <code><![CDATA[
             [CompilationErrorMethodMacro("Do not use `orElse`, instead use `|` operator.")]
             public static Option<A> orElse<A>(this Option<A> o1, Option<A> o2) => throw new MacroException();
             ]]></code>
            
             This will fail the compilation, while still allowing other methods marked with <see cref="T:System.ObsoleteAttribute"/> to
             work.
             <para/>
             In addition - no one will be able to define the `orElse` method with the same signature, because it is already
             defined, thus it will prevent them from thinking "I'll add it, because it's a great idea" :)
             </summary>
        </member>
        <member name="M:GenerationAttributes.LazyProperty.#ctor(System.Boolean)">
            <param name="hasReset">
            Generate a reset method for the property. The reset method will clear the cached value.
            </param>
        </member>
        <member name="T:GenerationAttributes.TypesWithMacroAttributes">
            <summary> Used internally by compiler. </summary>
        </member>
        <member name="T:GenerationAttributes.GenerateMacroLinkingAttribute">
            <summary>
            Marks method that should get a macro linking generated for it by
            <see cref="T:GenerationAttributes.GenerateMacroLinkingOfAssemblyAttribute"/>
            </summary>
        </member>
        <member name="P:GenerationAttributes.Macros.className">
            <summary>
            Replaces the invocation to the full class name of where the invocation is located.
            </summary>
            <example>
            <code>
            <![CDATA[
            // When called from this place.
            SomeNamespace.SubNamespace.SomeClass.NestedClassGeneric<A>.sampleMethod.localFunc.nestedLocalFunc
            // It becomes
            SomeNamespace.SubNamespace.MacroTestsClass.NestedClassGeneric<A>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:GenerationAttributes.Macros.classNameShort">
            <summary>
            Replaces the invocation to the short class name of where the invocation is located.
            </summary>
            <example>
            <code>
            <![CDATA[
            // When called from this place.
            SomeNamespace.SubNamespace.SomeClass.NestedClassGeneric<A>.sampleMethod.localFunc.nestedLocalFunc
            // It becomes
            NestedClassGeneric
            ]]>
            </code>
            </example>
        </member>
        <member name="P:GenerationAttributes.Macros.classAndMethodName">
            <summary>
            Replaces the invocation to the full class name (<see cref="P:GenerationAttributes.Macros.className"/>) and the method name
            (<see cref="P:GenerationAttributes.Macros.methodName"/>) of where the invocation is located.
            </summary>
            <example>
            <code>
            <![CDATA[
            // When called from this place.
            SomeNamespace.SubNamespace.SomeClass.NestedClassGeneric<A>.sampleMethod.localFunc.nestedLocalFunc
            // It becomes
            SomeNamespace.SubNamespace.SomeClass.NestedClassGeneric<A>.sampleMethod.localFunc.nestedLocalFunc
            ]]>
            </code>
            </example>
        </member>
        <member name="P:GenerationAttributes.Macros.classAndMethodNameShort">
            <summary>
            Replaces the invocation to the short class name (<see cref="P:GenerationAttributes.Macros.classNameShort"/>) and the method name
            (<see cref="P:GenerationAttributes.Macros.methodName"/>) of where the invocation is located.
            </summary>
            <example>
            <code>
            <![CDATA[
            // When called from this place.
            SomeNamespace.SubNamespace.SomeClass.NestedClassGeneric<A>.sampleMethod.localFunc.nestedLocalFunc
            // It becomes
            NestedClassGeneric.sampleMethod.localFunc.nestedLocalFunc
            ]]>
            </code>
            </example>
        </member>
        <member name="P:GenerationAttributes.Macros.methodName">
            <summary>
            Replaces the invocation to the method name of where the invocation is located. If it is located in a local
            function, then it also prints a full path starting from the method.
            </summary>
            <example>
            <code>
            <![CDATA[
            // When called from this place.
            SomeNamespace.SubNamespace.SomeClass.NestedClassGeneric<A>.sampleMethod.localFunc.nestedLocalFunc
            // It becomes
            sampleMethod.localFunc.nestedLocalFunc
            ]]>
            </code>
            </example>
        </member>
        <member name="T:GenerationAttributes.TypeInMacros">
            <summary>
            When we want to use fields of type <see cref="T:System.Type"/> in macro attribute definitions, we need to use
            <see cref="T:System.Object"/> type instead.
            <br/>
            It is like that, because compiler creates an instance of the attribute object (so it can run the constructor
            code). But the compiler sees <see cref="T:System.Type"/> parameters as `ITypeSymbol` and can't cast that to
            <see cref="T:System.Type"/>.
            <para/>
            <see cref="T:System.Object"/> type is the common type for both: <see cref="T:System.Type"/> and `ITypeSymbol`. And, unfortunately,
            we can not reference `ITypeSymbol` from this assembly, as that is a type that comes from the compiler assembly.
            </summary>
        </member>
        <member name="F:GenerationAttributes.TypeInMacros.type">
            <summary>
            Type of this variable is `INamedTypeSymbol` when accessed while compiling from maro code.
            Use `TypeInMacrosExts.toSymbol` extension method in that case.
            <para/>
            At runtime type of this variable is <see cref="T:System.Type"/>. You can create a typesafe extension method to access this
            in your code.
            </summary>
        </member>
    </members>
</doc>
