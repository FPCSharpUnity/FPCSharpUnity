<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GenerationAttributes</name>
    </assembly>
    <members>
        <member name="T:GenerationAttributes.ConstructorFlags">
            <summary>
            <code><![CDATA[
               None = 0,
               Constructor = 1,
               Apply =   Constructor | 1 << 1,
               Copy =    Constructor | 1 << 2,
               Withers = Constructor | 1 << 3,
               All =     Constructor | Apply | Copy | Withers
            ]]></code>
            </summary>
        </member>
        <member name="F:GenerationAttributes.ConstructorFlags.None">
            <summary> Does not generate constructors </summary>
        </member>
        <member name="F:GenerationAttributes.ConstructorFlags.Constructor">
            <summary> Generates basic constructor </summary>
        </member>
        <member name="F:GenerationAttributes.ConstructorFlags.Apply">
            <summary> Generates basic constructor and `apply` constrictor </summary>
        </member>
        <member name="F:GenerationAttributes.ConstructorFlags.Copy">
            <summary> Generates basic constructor and `copy` extension </summary>
        </member>
        <member name="F:GenerationAttributes.ConstructorFlags.Withers">
            <summary> Generates basic constructor and `with` extensions </summary>
        </member>
        <member name="F:GenerationAttributes.ConstructorFlags.All">
            <summary> Generates basic constructor, `copy` extension, `with` extensions and `apply` constrictor </summary>
        </member>
        <member name="F:GenerationAttributes.RecordGenerationSettings.excludeNames">
            <summary>
            Array of names (field names and property names) to exclude from the generated Record code.
            <br/>
            If this array contains at leas 1 element and the Record attribute is applied on a struct,
            then the generated constructor will also call the default constructor.
            <para/>
            Excluded names will not be used anywhere: constructor, ToString, GetHashCode, comparer, etc...
            <para/>
            Alternatively, you can use <see cref="T:GenerationAttributes.RecordExcludeAttribute"/> instead of this array.
            </summary>
        </member>
        <member name="P:GenerationAttributes.RecordAttribute.ExcludeNames">
            <inheritdoc cref="F:GenerationAttributes.RecordGenerationSettings.excludeNames"/>
        </member>
        <member name="T:GenerationAttributes.GenConstructorAttribute">
            <summary>
            Generates constructor using the same rules that <see cref="T:GenerationAttributes.RecordAttribute"/> uses.
            <para/>
            You can use <see cref="T:GenerationAttributes.RecordExcludeAttribute"/> to exclude the some fields or properties.
            </summary>
        </member>
        <member name="T:GenerationAttributes.GenToStringAttribute">
            <summary>
            Generates ToString method using the same rules that <see cref="T:GenerationAttributes.RecordAttribute"/> uses.
            <para/>
            You can use <see cref="T:GenerationAttributes.RecordExcludeAttribute"/> to exclude the some fields or properties.
            </summary>
        </member>
        <member name="T:GenerationAttributes.RecordExcludeAttribute">
            <summary>
            Add this to a field or a property to exclude a member from getting included in the Record partials generation.
            </summary>
        </member>
        <member name="T:GenerationAttributes.RecordTypeAttribute">
            <summary>
            Use this attribute on record fields when compiler complains that it does not know the type of the field value.
            <para/>
            This happens when the type that sits on a record field is generated by the compiler.
            </summary>
        </member>
        <member name="T:GenerationAttributes.RecordDefaultValueForConstructorParamAttribute">
            <summary>
            Add this attribute on field/property which should have a default value assigned to the corresponding constructor
            parameter. This will make that parameter optional and you will not need to provide a value everytime.
            </summary>
        </member>
        <member name="T:GenerationAttributes.RecordAddImplicitToConstructorParamAttribute">
            <summary>
            Add this attribute on field/property which should have a [Implicit] attribute added to the corresponding
            constructor parameter.
            </summary>
        </member>
        <member name="F:GenerationAttributes.RecordFieldType.Enum">
            <summary> Marked field type is an enum. </summary>
        </member>
        <member name="F:GenerationAttributes.RecordFieldType.Struct">
            <summary> Marked field type is a struct type. </summary>
        </member>
        <member name="F:GenerationAttributes.RecordFieldType.Reference">
            <summary> Marked field type is a reference type. </summary>
        </member>
        <member name="T:GenerationAttributes.AttributeMacroAttribute">
             <summary>
             Add this AttributeMacro attribute on your own custom attribute.
             Then your custom attribute when used on a type definition (class, struct or enum) will generate new type members.
             <para />
             This uses scriban template engine https://github.com/scriban/scriban/blob/master/doc/language.md
             <para />
             Available parameters:
             <ul>
               <li><b>type</b>: Type - current type (containing type if attribute is added on a field or a property)</li>
               <li><b>fieldName</b>: * - refers to a field value of 'fieldName' on your custom attribute.</li>
             </ul>
             Parameters available when target attribute is used on a field only:
             <ul>
               <li><b>field</b>: Field - field on which the attribute is added</li>
               <li><b>field_or_prop</b>: Field - field on which the attribute is added</li>
             </ul>
             Parameters available when target attribute is used on a property only:
             <ul>
               <li><b>property</b>: Property - property on which the attribute is added</li>
               <li><b>field_or_prop</b>: Property - property on which the attribute is added</li>
             </ul>
             Custom types.<br />
             Field:
             <ul>
               <li><b>name</b>: string</li>
               <li><b>type</b>: Type</li>
               <li><b>is_const</b>: bool</li>
               <li><b>is_read_only</b>: bool</li>
               <li><b>constant_value</b>: object? -
             constant value that we get from compiler API. It should be available for const fields.</li>
            
               <li><b>is_property</b>: bool - false</li>
               <li><b>is_field</b>: bool - true</li>
               <li><b>is_method</b>: bool - false</li>
               <li><b>is_static</b>: bool</li>
               <li><b>is_abstract</b>: bool</li>
               <li><b>is_virtual</b>: bool</li>
               <li><b>is_private</b>: bool</li>
               <li><b>is_public</b>: bool</li>
               <li><b>is_internal</b>: bool</li>
               <li><b>is_protected</b>: bool</li>
               <li><b>visibility_modifier</b>: string = "public", "private", "protected", "internal", "protected internal",
             "not_applicable"</li>
             </ul>
             Method:
             <ul>
               <li><b>name</b>: string</li>
               <li><b>return_type</b>: Type</li>
               <li><b>is_read_only</b>: bool</li>
               <li><b>parameters</b>: { name: string, type: Type }</li>
               <li><b>type_parameters</b>: {
                 name: string,
                 additional_constraint: string? ("struct" | "class" | "unmanaged" | null),
                 has_constructor_constraint: bool,
                 constraint_types: Type[],
               }</li>
            
               <li><b>is_property</b>: bool - false</li>
               <li><b>is_field</b>: bool - false</li>
               <li><b>is_method</b>: bool - true</li>
               <li><b>is_static</b>: bool</li>
               <li><b>is_abstract</b>: bool</li>
               <li><b>is_virtual</b>: bool</li>
               <li><b>is_private</b>: bool</li>
               <li><b>is_public</b>: bool</li>
               <li><b>is_internal</b>: bool</li>
               <li><b>is_protected</b>: bool</li>
               <li><b>visibility_modifier</b>: string = "public", "private", "protected", "internal", "protected internal",
             "not_applicable"</li>
             </ul>
             Property:
             <ul>
               <li><b>name</b>: string</li>
               <li><b>type</b>: Type</li>
               <li><b>is_read_only</b>: bool</li>
               <li><b>is_write_only</b>: bool</li>
               <li><b>has_getter</b>: bool</li>
               <li><b>has_setter</b>: bool</li>
               <li><b>parameters</b>: { name: string, type: Type } - parameters are present in indexers</li>
            
               <li><b>is_property</b>: bool - true</li>
               <li><b>is_field</b>: bool - false</li>
               <li><b>is_method</b>: bool - false</li>
               <li><b>is_static</b>: bool</li>
               <li><b>is_abstract</b>: bool</li>
               <li><b>is_virtual</b>: bool</li>
               <li><b>is_private</b>: bool</li>
               <li><b>is_public</b>: bool</li>
               <li><b>is_internal</b>: bool</li>
               <li><b>is_protected</b>: bool</li>
               <li><b>visibility_modifier</b>: string = "public", "private", "protected", "internal", "protected internal",
             "not_applicable"</li>
             </ul>
             Type:
             <ul>
               <li><b>name</b>: string -
             fully qualified type name. Example: <![CDATA["global::System.Collections.Generic.List<int>"]]></li>
               <li><b>short_name</b>: string -
             just a type name without generic parameters. Example: "List"</li>
               <li><b>underlying_enum_type</b>: Type? - applicable only for enum types</li>
               <li><b>visibility_modifier</b>: string = "public", "private", "protected", "internal", "protected internal",
             "not_applicable"</li>
             </ul>
             EnumValue:
             <ul>
               <li><b>name</b>: string - fully qualified enum value name</li>
               <li><b>short_name</b>: string</li>
               <li><b>value</b>: * - value assigned to this enum member, usually an integer.</li>
             </ul>
             Custom functions:
             <ul>
               <li><b>throw</b>(string): void - fails code generation and passes the error message to the compiler output</li>
               <li><b>add_extensions</b>(string): void -
             pass a string that contains extension methods, they will be parsed and added to a separate static class.
             You can use capture feature of scriban engine to do that conveniently
             https://github.com/scriban/scriban/blob/master/doc/language.md#96-capture-variable--end
               </li>
               <li><b>add_interface</b>(string): void - adds an interface to a generated partial class</li>
               <li><b>add_using</b>(string): void - adds `using` directive to the generated file</li>
               <li><b>rename</b>(string): string - renames the string according to public accessor naming rules</li>
               <li><b>fdqn_last</b>(string): string</li>
               <li><b>type_arguments</b>(Type): Type[] - array of generic arguments if they exist on this type</li>
               <li><b>type_enum_values</b>(Type): EnumValue[] - array of enum values, available only if type is an enum type</li>
               <li><b>type_enum_value</b>(Type, name: string): object? - gets enum constant value</li>
               <li><b>type_reduced_name</b>(Type): string - short string representation of the Type name.
             May not be shortened if it does not resolve correctly in current context.</li>
               <li><b>type_get_all_fields</b>(Type, public = true, private = true, protected = true, instance = true,
             static = false, const = false): Field[]<br />
             Gets all fields of a Type. You can filter the list based on parameters. Use named arguments syntax to set up the filters
             https://github.com/scriban/scriban/blob/master/doc/language.md#named-arguments</li>
               <li><b>type_get_all_methods</b>(
                 Type, public = true, private = true, protected = true, instance = true, static = false
                 include_base_types = false, include_base_interfaces = false
               ): Method[]</li>
               <li><b>type_get_all_properties</b>(
                 Type, public = true, private = true, protected = true, instance = true, static = false
                 include_base_types = false, include_base_interfaces = false
               ): Property[]</li>
               <li><b>type_get_field</b>(Type, string): Field - gets field of a Type by a field name</li>
               <li><b>type_get_property</b>(Type, string): Property - gets property of a Type by a property name</li>
               <li><b>type_get_full_metadata_name</b>(Type): string - gets full metadata name that can be used in find_type method. Implementation taken from here https://stackoverflow.com/questions/27105909/get-fully-qualified-metadata-name-in-roslyn</li>
               <li><b>type_get_descendants_in_assembly</b>(type Type, typeForAssembly Type = null, collectIndirectDescendants = false): Type[]<br />
             Gets all descendant types that are contained in a single assembly.<br />
             Assembly to check is collected from the 'typeForAssembly' parameter. If 'typeForAssembly' is not provided,
             then assembly is collected from the first parameter.<br />
             <b>collectIndirectDescendants</b> - if false, this method collect only direct (Level 1) descendants.<br />
             This method is not optimized so don't call it often.</li>
            
               <li><b>generate_record_members</b>(
             fieldsAndProps: (Field|Property|CodeGeneration.FieldOrProp)[],
             generateComparer: bool = true,
             generateToString: bool = false,
             generateGetHashCode: bool = true,
             constructorFlags: int = (int) ConstructorFlags.Default
             ): void<br />
               Generates record members (constructors and other functions) on current type for fieldsAndProps that were
             passed in as a first argument.
               </li>
             <li><b>create_field_or_prop</b>(type: Type, identifier: string): CodeGeneration.FieldOrProp<br />
               Creates a data structure that can only be passed to <b>generate_record_members</b> method.
               </li>
            
               <li><b>type_get_record_members</b>(Type): {"all": (Field|Property)[], "fields": Field[], "properties": Property[]} -
             gets and filters members of a type using the same logic as a <see cref="T:GenerationAttributes.RecordAttribute"/> would.</li>
               <li><b>find_type</b>(fdqn: string, typeForAssembly: Type = null): Type?<br />
               Tries to find a type in a single assembly.<br />
               Assembly to check is collected from the 'typeForAssembly' parameter. If 'typeForAssembly' is not provided,
               then the type is searches in all available assemblies.<br />
               You can use type_get_full_metadata_name to get the name that is suitable for this function.<br />
               Returns null if not found.</li>
               <li><b>is_var_defined</b>(string): bool - is variable defined in root scope</li>
               <li><b>camel_case</b> and similar string functions from https://github.com/soltys/Soltys.ChangeCase</li>
               <li><b>Builtins</b> https://github.com/scriban/scriban/blob/master/doc/builtins.md</li>
             </ul>
             </summary>
        </member>
        <member name="T:GenerationAttributes.MacroAttribute">
            <summary>
            Similar to <see cref="T:GenerationAttributes.AttributeMacroAttribute"/>, but this can be used directly on the target, without creating an
            attribute. Use this if you want to write a macro that is needed only once.
            </summary>
        </member>
        <member name="P:GenerationAttributes.IMacroAttribute.StrictVariables">
            <summary>
            If set to true, any variables that were not found during variable resolution will throw a ScriptRuntimeException
            </summary>
        </member>
        <member name="T:GenerationAttributes.Documentation">
            <summary>
            inheritdoc does not work in built dlls :(
            </summary>
        </member>
        <member name="F:GenerationAttributes.Documentation.COMMON">
            <summary>
              <li><b>is_static</b>: bool</li>
              <li><b>is_abstract</b>: bool</li>
              <li><b>is_virtual</b>: bool</li>
              <li><b>is_private</b>: bool</li>
              <li><b>is_public</b>: bool</li>
              <li><b>is_internal</b>: bool</li>
              <li><b>is_protected</b>: bool</li>
              <li><b>visibility_modifier</b>: string = "public", "private", "protected", "internal", "protected internal",
            "not_applicable"</li>
            </summary>
        </member>
        <member name="T:GenerationAttributes.Consts">
            <inheritdoc cref="T:GenerationAttributes.AttributeMacroAttribute"/>
        </member>
        <member name="F:GenerationAttributes.Consts.UNUSED_NAME">
            <summary>
            Dummy name that we should never encounter in compiler defines list.
            Purpose: we want to remove instances of some attributes from compiled code.
            Eg.: We put a [Record] attribute on some class in a project X that is being compiled with this compiler.
            Then C# compiler would strip that attribute from the compiled project X dll.
            </summary>
        </member>
    </members>
</doc>
