<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeGenerator</name>
    </assembly>
    <members>
        <member name="T:IncrementalCompiler.TreeAnalyzer.TreeWithOriginalPath">
            <summary>
            For input source code, path is taken from the tree.
            <para/>
            If the tree is generated, path is taken from the original tree.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.TreeAnalyzer.TreeWithOriginalPath.#ctor(Microsoft.CodeAnalysis.SyntaxTree,System.String)">
            <summary>
            For input source code, path is taken from the tree.
            <para/>
            If the tree is generated, path is taken from the original tree.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.CodeGeneration.tryProcessAttributeMacro(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.AttributeData,Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax,Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.IPropertySymbol,System.Action{Microsoft.CodeAnalysis.Diagnostic},IncrementalCompiler.GenerationSettings,Microsoft.CodeAnalysis.SemanticModel)">
             <summary>
            
             </summary>
             <param name="attributeMacroType"></param>
             <param name="attributeToCheck"></param>
             <param name="typeSymbol"></param>
             <param name="maybeFieldSymbol">
             If set, then the attribute (<see cref="!:attributeToCheck"/>) sits on a field.
             Otherwise it sits on a type (<see cref="!:typeSymbol"/>).
             </param>
             <param name="maybePropertySymbol">
             If set, then the attribute (<see cref="!:attributeToCheck"/>) sits on a property.
             Otherwise it sits on a type (<see cref="!:typeSymbol"/>).
             </param>
             <param name="addDiagnostic"></param>
             <returns>New class members as string if there are any.</returns>
        </member>
        <member name="T:IncrementalCompiler.CodeGeneration.FieldOrProp.FieldOrPropTypeKind">
            <summary>
            Special enum used only here. Add more values when you need them.
            </summary>
        </member>
        <member name="F:IncrementalCompiler.CodeGeneration.FieldOrProp.defaultValueForConstructorParam">
            <summary>
            Whether to set parameter in constructor to default value defined in this string.
            </summary>
        </member>
        <member name="F:IncrementalCompiler.CodeGeneration.FieldOrProp.addImplicitToConstructorParam">
            <summary>
            Whether yo add [Implicit] attribute to constructor parameter.
            </summary>
        </member>
        <member name="T:IncrementalCompiler.CodeGeneration.TypeParameterListMagnet">
            <param name="list">
            array of type parameters, for example ["A", "B"] would produce <![CDATA[<A, B>]]>
            </param>
        </member>
        <member name="M:IncrementalCompiler.CodeGeneration.TypeParameterListMagnet.#ctor(System.String[])">
            <param name="list">
            array of type parameters, for example ["A", "B"] would produce <![CDATA[<A, B>]]>
            </param>
        </member>
        <member name="P:IncrementalCompiler.CodeGeneration.TypeParameterListMagnet.list">
            <summary>
            array of type parameters, for example ["A", "B"] would produce <![CDATA[<A, B>]]>
            </summary>
        </member>
        <member name="M:IncrementalCompiler.CodeGeneration.TypeParameterListMagnet.op_Implicit(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)~IncrementalCompiler.CodeGeneration.TypeParameterListMagnet">
            <summary>For backwards compatibility.</summary>
        </member>
        <member name="T:IncrementalCompiler.CodeGeneration.GeneratedCaseClassArgs">
            <summary>
            Information about the type that contains record fields.
            </summary>
            <param name="identifier">Identifier without generic types, for example <![CDATA[`Foo`]]></param>
            <param name="fullName">FQDN Identifier without generic types, for example <![CDATA[`foo.bar.baz.Foo`]]></param>
            <param name="isGeneric">
            true if the type or any of the parent types (if this is a nested type) are generic.
            </param>
            <param name="maybeTypeParameterList">
            array of type parameters, for example ["A", "B"] would produce <![CDATA[<A, B>]]>
            </param>
        </member>
        <member name="M:IncrementalCompiler.CodeGeneration.GeneratedCaseClassArgs.#ctor(System.String,System.String,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.Boolean,System.Boolean,System.Boolean,System.Boolean,IncrementalCompiler.CodeGeneration.TypeParameterListMagnet,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},System.Boolean)">
            <summary>
            Information about the type that contains record fields.
            </summary>
            <param name="identifier">Identifier without generic types, for example <![CDATA[`Foo`]]></param>
            <param name="fullName">FQDN Identifier without generic types, for example <![CDATA[`foo.bar.baz.Foo`]]></param>
            <param name="isGeneric">
            true if the type or any of the parent types (if this is a nested type) are generic.
            </param>
            <param name="maybeTypeParameterList">
            array of type parameters, for example ["A", "B"] would produce <![CDATA[<A, B>]]>
            </param>
        </member>
        <member name="P:IncrementalCompiler.CodeGeneration.GeneratedCaseClassArgs.identifier">
            <summary>Identifier without generic types, for example <![CDATA[`Foo`]]></summary>
        </member>
        <member name="P:IncrementalCompiler.CodeGeneration.GeneratedCaseClassArgs.fullName">
            <summary>FQDN Identifier without generic types, for example <![CDATA[`foo.bar.baz.Foo`]]></summary>
        </member>
        <member name="P:IncrementalCompiler.CodeGeneration.GeneratedCaseClassArgs.isGeneric">
            <summary>
            true if the type or any of the parent types (if this is a nested type) are generic.
            </summary>
        </member>
        <member name="P:IncrementalCompiler.CodeGeneration.GeneratedCaseClassArgs.maybeTypeParameterList">
            <summary>
            array of type parameters, for example ["A", "B"] would produce <![CDATA[<A, B>]]>
            </summary>
        </member>
        <member name="P:IncrementalCompiler.CodeGeneration.GeneratedCaseClassArgs.filteredTypeParameterList">
            <summary>As <see cref="P:IncrementalCompiler.CodeGeneration.GeneratedCaseClassArgs.maybeTypeParameterList"/> but returns null if the list has 0 elements.</summary>
        </member>
        <member name="P:IncrementalCompiler.CodeGeneration.GeneratedCaseClassArgs.typeParameterListStr">
            <summary>Rendered <see cref="P:IncrementalCompiler.CodeGeneration.GeneratedCaseClassArgs.maybeTypeParameterList"/>.</summary>
        </member>
        <member name="T:IncrementalCompiler.RegisterGeneratorsBase">
            <summary>
            To register custom code generators on your own attributes: <br/>
            1. Extend this class. <br/>
            2. Add <see cref="T:Microsoft.CodeAnalysis.GeneratorAttribute"/> attribute to that class. <br/>
            3. Compile the dll.<br/>
            4. Put his dll in the same folder as Microsoft.CodeAnalysis.dll<br/>
            5. Reference that dll or a project as an `analyzer` in the project that needs this code generator
            (https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview).
            </summary>
        </member>
        <member name="M:IncrementalCompiler.RegisterGeneratorsBase.registerGenerators(IncrementalCompiler.IRegisterActions)">
            <summary> Register custom generators. </summary>
        </member>
        <member name="M:IncrementalCompiler.ProcessBaseAttributeArgs.addCompilationError(System.String)">
            <summary> Creates a compilation error message at the location of currently analyzed attribute. </summary>
        </member>
        <member name="M:IncrementalCompiler.ProcessBaseAttributeArgs.addUsing(System.String)">
            <inheritdoc cref="M:IncrementalCompiler.GeneratorCtx.addUsing(System.String,System.String)"/>
        </member>
        <member name="M:IncrementalCompiler.ProcessBaseAttributeArgs.addUsing(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)">
            <inheritdoc cref="M:IncrementalCompiler.GeneratorCtx.addUsing(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)"/>
        </member>
        <member name="M:IncrementalCompiler.ProcessBaseAttributeArgs.addMemberToPartialClass(System.String)">
            <inheritdoc cref="M:IncrementalCompiler.GeneratorCtx.addMemberToPartialClass(System.String,System.String)"/>
        </member>
        <member name="M:IncrementalCompiler.ProcessBaseAttributeArgs.addMemberToExtensionClass(System.String)">
            <inheritdoc cref="M:IncrementalCompiler.GeneratorCtx.addMemberToExtensionClass(System.String,System.String)"/>
        </member>
        <member name="M:IncrementalCompiler.ProcessBaseAttributeArgs.addMemberTo(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)">
            <inheritdoc cref="M:IncrementalCompiler.GeneratorCtx.addMemberTo(System.String,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)"/>
        </member>
        <member name="T:IncrementalCompiler.AfterCodeGenerationArgs">
            <summary>
            Args for <see cref="M:IncrementalCompiler.IRegisterActions.addCallbackAfterCodeGeneration(System.Action{IncrementalCompiler.AfterCodeGenerationArgs})"/> callback.
            </summary>
            <param name="generatedFolder">Path to a folder where compiler stores generated files.</param>
            <param name="baseDirectory">Path to a solution directory.</param>
        </member>
        <member name="M:IncrementalCompiler.AfterCodeGenerationArgs.#ctor(System.String,System.String)">
            <summary>
            Args for <see cref="M:IncrementalCompiler.IRegisterActions.addCallbackAfterCodeGeneration(System.Action{IncrementalCompiler.AfterCodeGenerationArgs})"/> callback.
            </summary>
            <param name="generatedFolder">Path to a folder where compiler stores generated files.</param>
            <param name="baseDirectory">Path to a solution directory.</param>
        </member>
        <member name="P:IncrementalCompiler.AfterCodeGenerationArgs.generatedFolder">
            <summary>Path to a folder where compiler stores generated files.</summary>
        </member>
        <member name="P:IncrementalCompiler.AfterCodeGenerationArgs.baseDirectory">
            <summary>Path to a solution directory.</summary>
        </member>
        <member name="M:IncrementalCompiler.IRegisterActions.addCallbackAfterCodeGeneration(System.Action{IncrementalCompiler.AfterCodeGenerationArgs})">
            <summary>
            Add a callback that will be executed after the code generation and macros are done.
            <para/>
            Most likely you will want to collect data from other callbacks and generate new files based on that data.
            <para/>
            Callbacks from other `add` methods in this interface <see cref="T:IncrementalCompiler.IRegisterActions"/> get called on different
            threads in parallel. Because of that you could use `ConcurrentBag` to collect data and then sort it before using
            it.
            </summary>
        </member>
        <member name="T:IncrementalCompiler.Stage">
            <summary>
            At which stage we should execute the code generation for a concrete attribute.
            </summary>
        </member>
        <member name="F:IncrementalCompiler.Stage.RunBefore">
            <summary>
            This will be run before the <see cref="F:IncrementalCompiler.Stage.Default"/> stage. Use this for codegen that generates types which need to
            be used by other macros.
            </summary>
        </member>
        <member name="F:IncrementalCompiler.Stage.Default">
            <summary>
            Default stage, should be used for most attributes.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.Extensions.getAllMembers(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Gets all members of a type, includes members in base types.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.Extensions.AddAncestors(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax,System.Boolean)">
            <summary>
            Copies namespace and class hierarchy from the original <see cref="!:memberNode" />
            </summary>
        </member>
        <member name="M:IncrementalCompiler.Extensions.CleanUsings(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax})">
            <summary>
            Cleans comments and regions from `using` directives list.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.Extensions.toCode(Microsoft.CodeAnalysis.Accessibility)">
            <summary>
            Converts <see cref="T:Microsoft.CodeAnalysis.Accessibility"/> to a visibility modifier that can be used in the code (like `public`).
            </summary>
        </member>
        <member name="M:IncrementalCompiler.Extensions.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder,``0,``1,``1@)">
            <summary>
            Tries to add the key/value pair to the builder, returns false and <see cref="!:existingValue"/> if that fails.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.Extensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,``1@)">
            <summary>
            Tries to add the key/value pair to the dictionary, returns false and <see cref="!:existingValue"/> if that fails.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.Extensions.getHashCodeDeterministic(System.String)">
            <summary>
            GetHashCode on strings is different every time you restart the application. Use this to have identical hashcode
            between runs.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.Extensions.getConstantVal``1(Microsoft.CodeAnalysis.Operations.IArgumentOperation)">
            <summary>
            Gets compile time constant value of a method invocation argument.
            Falls back to an argument default value if it is not provided.
            <para/>
            This method is suitable for non-nullable reference types and for primitives.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.Extensions.getConstantValEnum``1(Microsoft.CodeAnalysis.Operations.IArgumentOperation)">
            <summary>
            Same as <see cref="M:IncrementalCompiler.Extensions.getConstantVal``1(Microsoft.CodeAnalysis.Operations.IArgumentOperation)"/>, but for enums.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.Extensions.getConstantValOpt``1(Microsoft.CodeAnalysis.Operations.IArgumentOperation)">
            <summary>
            Same as <see cref="M:IncrementalCompiler.Extensions.getConstantVal``1(Microsoft.CodeAnalysis.Operations.IArgumentOperation)"/>, but for nullable reference types.
            </summary>
        </member>
        <member name="T:IncrementalCompiler.GeneratorCtx">
            <summary>
            This class is instantiated per C# file.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.GeneratorCtx.addCompilationError(System.String,Microsoft.CodeAnalysis.Location)">
            <summary>
            Creates a compilation error message. Compilation will not succeed after you call this.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.GeneratorCtx.addNewTypeMember(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Adds a new member to the root of a generated file. Usually a class, interface or a struct. Can also be a
            namespace that nests other types.
            <para/>
            You should probably <see cref="M:IncrementalCompiler.GeneratorCtx.addMemberToPartialClass(System.String,System.String)"/>, it is a more convenient method.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.GeneratorCtx.addNewTypeMembers(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax[])">
            <summary>
            Adds new members to the root of a generated file. Usually a class, interface or a struct. Can also be a
            namespace that nests other types.
            <para/>
            You should probably <see cref="M:IncrementalCompiler.GeneratorCtx.addMemberToPartialClass(System.String,System.String)"/>, it is a more convenient method.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.GeneratorCtx.addNewFile(IncrementalCompiler.CodeGeneration.IGenerationResult)">
            <summary>
            Create a new file. Can be used when you want to generate non-C# file (<see cref="T:IncrementalCompiler.CodeGeneration.GeneratedFile"/>).
            </summary>
        </member>
        <member name="M:IncrementalCompiler.GeneratorCtx.addMemberToPartialClass(System.String,System.String)">
            <summary>
            Adds new class member/members to a partial class definition.
            </summary>
            <param name="generatorLabel">
            Label used in the comments of generated code.
            <br/>
            All code generated with the same label will get a comment above it that helps you track which code generator is
            responsible for which code.
            <br/>
            It is recommended to use attribute call name as the label.
            </param>
            <param name="memberSyntax">Code that contains one or more class members.</param>
        </member>
        <member name="M:IncrementalCompiler.GeneratorCtx.addMemberTo(System.String,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)">
            <summary>
            Adds new class member/members to a partial class definition or a namespace.
            </summary>
            <param name="generatorLabel">
            Label used in the comments of generated code.
            <br/>
            All code generated with the same label will get a comment above it that helps you track which code generator is
            responsible for which code.
            </param>
            <param name="namespaceOrType">Where new members should be added.</param>
            <param name="memberSyntax">Code that contains one or more class members.</param>
        </member>
        <member name="M:IncrementalCompiler.GeneratorCtx.addUsing(System.String,System.String)">
            <summary>
            Adds a `using` directive to the top of the generated file.
            <para/>
            It should not contain `using` keyword or a semicolon.
            <example><code>ctx.addUsing("System.Linq");</code></example>
            </summary>
            <param name="generatorLabel"><inheritdoc cref="M:IncrementalCompiler.GeneratorCtx.addMemberToExtensionClass(System.String,System.String)"/></param>
            <param name="value">E.g. `System.Linq`</param>
        </member>
        <member name="M:IncrementalCompiler.GeneratorCtx.useNullableEnable">
            <summary>
            Adds `#nullable enable` header to a generated file.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.GeneratorCtx.addUsing(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)">
            <summary>
            Adds a `using` directive to the top of the generated file.
            </summary>
            <param name="generatorLabel"><inheritdoc cref="M:IncrementalCompiler.GeneratorCtx.addMemberToExtensionClass(System.String,System.String)"/></param>
            <param name="value">Using statement syntax</param>
        </member>
        <member name="M:IncrementalCompiler.GeneratorCtx.addBaseInterfaceToPartialClass(System.String)">
            <summary>
            Adds new base interfaces to a partial class definition.
            </summary>
            <param name="baseTypeSyntax">Code that contains one or more types separated by commas.</param>
        </member>
        <member name="M:IncrementalCompiler.GeneratorCtx.addMemberToExtensionClass(System.String,System.String)">
            <summary>
            Adds new class members to a static class definition, commonly used for extension methods.
            </summary>
            <param name="generatorLabel"><inheritdoc cref="M:IncrementalCompiler.GeneratorCtx.addMemberToExtensionClass(System.String,System.String)"/></param>
            <param name="memberSyntax">Code that contains one or more class members.</param>
        </member>
        <member name="F:IncrementalCompiler.MacroProcessor.ReplacementsScriptObject.replacementLamdas">
            <summary> Key -> argument name </summary>
        </member>
        <member name="T:IncrementalCompiler.MacroProcessorImplicits.StaticImplicitsDict">
            <summary>
            All accessible (public and internal) static fields and properties with an <see cref="T:GenerationAttributes.Implicit"/> attribute.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.MacroProcessorImplicits.StaticImplicitsDict.#ctor(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ITypeSymbol,IncrementalCompiler.MacroProcessorImplicits.FieldOrProperty})">
            <summary>
            All accessible (public and internal) static fields and properties with an <see cref="T:GenerationAttributes.Implicit"/> attribute.
            </summary>
        </member>
        <member name="T:IncrementalCompiler.MacroProcessorImplicits.StaticImplicitMethodsDict">
            <summary>
            All parameters of the method are implicit.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.MacroProcessorImplicits.StaticImplicitMethodsDict.#ctor(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.IMethodSymbol})">
            <summary>
            All parameters of the method are implicit.
            </summary>
        </member>
        <member name="T:IncrementalCompiler.MacroProcessorImplicits.DescendantTypesDict">
            <summary>
            Contains all direct descendant types of each type.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.MacroProcessorImplicits.DescendantTypesDict.#ctor(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.ITypeSymbol,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol}})">
            <summary>
            Contains all direct descendant types of each type.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.MacroProcessorImplicits.AfterCheckAttributes(System.Action{System.String})">
            <returns>Added implicit parameters to passthrough methods.</returns>
        </member>
        <member name="F:IncrementalCompiler.MacroProcessorImplicits.ImplicitSymbolRef.displayString">
            <summary> Used to display it to the user in the diagnostics </summary>
        </member>
        <member name="F:IncrementalCompiler.MacroProcessorImplicits.ImplicitSymbolRef.isHidden">
            <summary>
            Hidden means it can't be referenced in the current context, because another local variable has the same name.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.MacroReplacer.visitExpressionSyntax(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)">
            <summary>
            Visit <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax"/> that is not part of a <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax"/> and return either a
            modified <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax"/> or a <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax"/> that should replace the expression.
            </summary>
        </member>
        <member name="M:IncrementalCompiler.MacroReplacer.visitExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)">
            <summary>
            A wrapper to <see cref="M:IncrementalCompiler.MacroReplacer.visitExpressionSyntax(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"/>, but for <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax"/>.
            </summary>
        </member>
        <member name="T:CodeGenerator.MethodLinkerBase">
            <summary>
            This class is used as a base for classes generated by <see cref="!:GenerateMacroLinkingOfAssembly"/>
            </summary>
        </member>
        <member name="T:CodeGenerator.ScribanWrapper">
            <summary>
            Parsed Scriban template with some additional data.
            </summary>
        </member>
        <member name="M:CodeGenerator.TypeInMacrosExts.toSymbol(GenerationAttributes.TypeInMacros)">
            <summary>
            This cast should always succeed. See <see cref="T:GenerationAttributes.TypeInMacros"/>.
            </summary>
        </member>
    </members>
</doc>
